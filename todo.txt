To do:







-api for transaction (pix)
-api for transaction (charge card): partially complete, waiting for celcoin contract

-setup prod environment & make a deployment
> 3 environments: local, dev, prod



Local:
-ios simulator
-docker
-supabase (local)

Dev:
-testflight (limited users)
-GCP (dev)
-supabase (dev)

Prod:
-app store / play store (US/BR)
-GCP (prod)
-supabase (prod)







Bugs:
-security: run docker local & check for env files etc.
-security: remove debug logs in prod (just run express not debug)
-security: supabase: only users to read/write their own data, not others (RLS / row level security)
-security: supabase: OTP expiry exceeds recommended threshold
-security: docker: USER appuser - into dockerfile (no root access)
-security: docker: add dockerignore: .env,.env.*,*.log,.git,.gitignore,node_modules, npm-debug.log, config,*.yml, secrets.yml
-security: add custom headers, validation check on server side so can block non-matching headers
-security: add security headers, helmet npm helmetjs.github.io
-security: rate limiting
-security: storing sensitive fields should be encrypted or hashed (cpf, passport, etc), key management?
-random [AuthApiError: Invalid Refresh Token: Refresh Token Not Found], solve with AsyncStorage.clear()
-display error toast message when not connected to the internet
-handle transaction errors (in transactionMethods) so users cant continue if db field write/update is incorrect (see editProfile + newUserEditProfile)
-add profile loading status (like transaction history)
-email login + signup: validate fields & catch blank fields before hitting supabase api
-forgot password (for email method)
-fix styling for pix method tabs, make responsive right now its fixed width
-add canMakePayment function to catch potential device payment issues
-add canLoginVia (google, apple, etc.) function to catch potential device login issues
-collect errors & log them online
-applepay: return real errors from payment errors (for setTransactionStatus)
-circular dependency issue: store/base.js -> composables/api.ts -> composables/auth.ts -> store/base.js


Wishlist:
-android app for 40% of all users
-send copy of transaction receipt via email
-add server logging for app
-qr code scan for pix key
-add email confirmation for email signups
-let users change their email (how does this work with social logins)
-add info icons / buttons to explain (things like) why certain fields are needed, etc.
-home screen should be transactions + add a button for new payment
-add logout button (clear all state)
-user_meta add device meta like phone type + os version


ApplePay libraries:
-https://github.com/rnw-community/rnw-community/tree/master/packages/react-native-payments
-https://dev.to/muhammad_harisbaig_1268d/custom-apple-pay-integration-in-react-native-with-nativ-3po8


Create pub/priv keys:
openssl genpkey -algorithm RSA -out private.pem -pkeyopt rsa_keygen_bits:4096 && openssl rsa -in private.pem -pubout -out public.pem
cat public.pem | base64 > public_key_base64.txt
cat private.pem | base64 > private_key_base64.txt


Production launch:
-create new public/private keys (as above)
-update branding: logo, about modal
-setup expo for deployment / apple dev account etc
-