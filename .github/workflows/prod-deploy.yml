name: Deploy to Prod environment

on:
  push:
    branches:
      - production

jobs:
  deploy:
    permissions:
      contents: 'read'
      id-token: 'write'

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # gcp auth
      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          token_format: 'access_token'
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_POOL_PROVIDER }}

      # docker auth
      - name: Docker Auth
        id: docker-auth
        uses: 'docker/login-action@v1'
        with:
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}'
          registry: '${{ secrets.GCP_REGION }}-docker.pkg.dev'

      # build app image
      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.EXPRESS_SERVICE_NAME }} -f ./docker/services/express/dockerfile .

      # tag app image
      - name: Tag Docker image
        run: |
          IMAGE_ID=$(docker images -q ${{ secrets.EXPRESS_SERVICE_NAME }})
          docker tag $IMAGE_ID ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_ARTIFACT_REPO_NAME }}/${{ secrets.EXPRESS_SERVICE_NAME }}:${{ github.sha }}

      # push app image
      - name: Push Docker app image
        run: |
          docker push ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_ARTIFACT_REPO_NAME }}/${{ secrets.EXPRESS_SERVICE_NAME }}:${{ github.sha }}

      # get all secrets
      - name: Get secrets from GCP
        run: |
          ALL_SECRETS_STRING=$(gcloud secrets list --format="value(name)" | while read -r secret; do printf "%s=%s:latest," "$secret" "$secret"; done | sed 's/,$//')
          echo "ALL_SECRETS_STRING=$ALL_SECRETS_STRING" >> $GITHUB_ENV

      # cloud run deploy app
      - name: Cloud run deploy app service
        run: |
          gcloud beta run deploy ${{ secrets.EXPRESS_SERVICE_NAME }} \
            --image=${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_ARTIFACT_REPO_NAME }}/${{ secrets.EXPRESS_SERVICE_NAME }}:${{ github.sha }} \
            --set-secrets=${{ env.ALL_SECRETS_STRING }} \
            --platform=managed \
            --region=${{ secrets.GCP_REGION }} \
            --min-instances=1 \
            --max-instances=3 \
            --cpu=1 \
            --memory=512Mi \
            --cpu-boost \
            --ingress=internal-and-cloud-load-balancing \
            --no-default-url \
            --service-account=${{ secrets.GCP_SERVICE_ACCOUNT }}

      # let service account invoke service
      - name: Add service account permissions
        run: |
          gcloud run services add-iam-policy-binding ${{ secrets.EXPRESS_SERVICE_NAME }} \
            --member="serviceAccount:${{ secrets.GCP_SERVICE_ACCOUNT }}" \
            --role="roles/run.invoker" \
            --region=${{ secrets.GCP_REGION }} \
            --project=${{ secrets.GCP_PROJECT_ID }}

      # remove old services / only keep 3 previous
      - name: Remove old cloud run services
        run: |
          REVISIONS=$(gcloud run revisions list \
            --service=${{ secrets.EXPRESS_SERVICE_NAME }} \
            --region=${{ secrets.GCP_REGION }} \
            --format="value(metadata.name)" \
            --sort-by=~metadata.creationTimestamp)
          COUNT=0
          for REVISION in $REVISIONS; do
          COUNT=$((COUNT + 1))
          if [ $COUNT -gt 3 ]; then
            gcloud run revisions delete $REVISION \
              --region=${{ secrets.GCP_REGION }} \
              --quiet
          fi
          done
